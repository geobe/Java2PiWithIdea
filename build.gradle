/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2020.  Georg Beier. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'application'
}

// give your project a reasonable group id,
// optimally based on your unique reverse url
group 'de.geobe.java2pi'
version '1.0'

sourceCompatibility = 1.8
mainClassName = 'de.geobe.java2pi.hello.RaspiHello'

repositories {
    mavenCentral()
}

/*
* Gradle tasks to distribute project to a remote linux host (e.g. Raspberry Pi). Common prerequisites are:
* 1. ssh, scp and sed are available on the local machine. Tested for windows with *ix tools from
*    git installation [https://git-scm.com/download/win]. In a standard Git installation, add
*    C:/Program Files/Git/usr/bin to your path to access ssh, scp, sed and more.
* 2. Public/private key authentication is implemented for the target machine. The private key in this project is
*    located in the project root directory which could create security issues in more delicate programs.
* 3. login@ip of target machine is defined in gradle.properties.
* 4. before running these scripts the first time, login once using ssh to the target machine to make target
*    fingerprint be known to the local machine.
* 5. If developing a web application, it is very helpful to make it have a shutdown menu because remote runs
*    ( xxxRunRemot() tasks) cannot be stopped from the development machine.
* 6. Target login must be enabled to run sudo without password dialog
 */

/**
 * distribute only latest jar build of current project assuming all needed libraries are already installed
 */
task distBuild() {
    try {
        dependsOn jar
        doFirst {
            fDistBuild()
        }
    } catch (Exception ex) {
        println ex
        throw ex
    }
}

/**
 * like distBuild(), but also try to execute project on target machine
 */
task distBuildAndRunRemote() {
    try {
        dependsOn jar
        doFirst {
            distributeBuildAndRun()
        }
    } catch (Exception ex) {
        println ex
        throw ex
    }
}

/**
 * distribute latest jar build of current project and all needed libraries
 */
task distAll() {
    try {
        dependsOn distZip
        doFirst {
            fDistAll()
        }
    } catch (Exception ex) {
        println ex
        throw ex
    }
}

/**
 * like distAll(), but also try to execute project on target machine
 */
task distAllAndRunRemote() {
    try {
        dependsOn distZip
        doFirst {
            distributeAllAndRun()
        }
    } catch (Exception ex) {
        println ex
        throw ex
    }
}

/**
 * a basic test that ssh can connect to target host with given properties
 */
task testRemoteLogin() {
    try {
        doFirst {
            remoteLogin()
        }
    } catch (Exception ex) {
        println ex
        throw ex
    }
}

/**
 * use scp to transfer latest project jar to target
 */
void fDistBuild() {
    exec {
        commandLine 'scp', '-i', "${keyfilepath}", "build/libs/${rootProject.name}-${version}.jar", "${remoteHome}:${targetpath}/${rootProject.name}-${version}/lib"
    }
}

/**
 * copy everything to the target and make it executable
 */
void fDistAll() {
    makeTargetPath()
    def x
    // unzip distribution as generated by standard gradle build task
    // in a slow network environment, could also be done on target machine
    exec {
        x = commandLine 'unzip', '-o', '-d', "${buildOutput}", "${buildOutput}/${rootProject.name}-${version}.zip"
    }
    println x
    // copy directory hierarchy using scp
    exec {
        x = commandLine 'scp', '-r', '-i', "${keyfilepath}", "${buildOutput}/${rootProject.name}-${version}", "${remoteHome}:${targetpath}"
    }
    println x
    // edit generated *nix startup script to start target program as sudo.
    // is only needed if program needs root privileges, e.g. access gpio on a raspi
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "sed -i -e s/'exec '/'sudo '/ ${targetpath}/${rootProject.name}-${version}/bin/${rootProject.name}"
    }
    // make startup script executable
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "chmod +x ${targetpath}/${rootProject.name}-${version}/bin/${rootProject.name}"
    }
    println x
}

void makeTargetPath() {
    def x
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "mkdir -pv ${targetpath}"
    }
    println x
}

/**
 * execute distributed program on target as background task
 */
void distributeBuildAndRun() {
    def x
    fDistBuild()
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "sh -c 'echo \$\$; exec ${targetpath}/${rootProject.name}-${version}/bin/${rootProject.name}' & " //"uname -mnos"
    }
    println x
}

/**
 * execute distributed program on target as background task
 */
void distributeAllAndRun() {
    def x
    fDistAll()
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "sh -c 'echo \$\$; exec ${targetpath}/${rootProject.name}-${version}/bin/${rootProject.name}' & " //"uname -mnos"
    }
    println x
}

/**
 * identify remote host and user
 */
void remoteLogin() {
    def x
    exec {
        x = commandLine 'ssh', '-i', "${keyfilepath}", "${remoteHome}", "sh -c 'echo \$\$; exec ${targetpath}/${rootProject.name}-${version}/bin/${rootProject.name}' & " //"uname -mnos"
    }
    println x
}

